buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
    }
}

apply plugin: 'sonar-runner'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-velocity")
    compile("org.springframework.boot:spring-boot-devtools")
    
    compile("org.springframework.hateoas:spring-hateoas")
    compile("org.springframework.ws:spring-ws-core")
    
    compile("com.google.code.gson:gson:2.3.1")
    
    compile("org.modelmapper:modelmapper:0.7.6")

    compile("com.lowagie:itext:2.1.7")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-all:1.10.19")
}

bootRun {

    doFirst() {
        File file = file(envVariable)

        def envProps = [:]
        if (file.canRead()) {
            def lines = file.readLines()
            for (def line : lines) {
                def props = line.split("=")
                envProps[props[0]] = props[1]
            }
        }

        environment(envProps)
    }
}
